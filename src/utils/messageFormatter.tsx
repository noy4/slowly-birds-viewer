import React from 'react';

const URL_PATTERN = /<(https?:\/\/[^>|]+)(?:\|[^>]+)?>/g;
const USER_MENTION_PATTERN = /<@([A-Z0-9]+)>/g;
const SLACK_EMOJI_PATTERN = /:([a-zA-Z0-9_\-+]+):/g;
const IMAGE_PATTERN = /<(https?:\/\/[^>]+\.(png|jpg|jpeg|gif))>/gi;

interface SlackFile {
  url_private?: string;
  mimetype?: string;
}

interface SlackMessage {
  files?: SlackFile[];
  text: string;
}

// ‰∏ÄËà¨ÁöÑ„Å™ÁµµÊñáÂ≠ó„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
const EMOJI_MAP: { [key: string]: string } = {
  // È°îÊñáÂ≠ó„Å®ÊÑüÊÉÖ
  'smile': 'üòä',
  'grin': 'üòÅ',
  'laughing': 'üòÑ',
  'joy': 'üòÇ',
  'rofl': 'ü§£',
  'wink': 'üòâ',
  'thinking_face': 'ü§î',
  'worried': 'üòü',
  'sob': 'üò≠',
  'scream': 'üò±',
  'angry': 'üò†',
  'rage': 'üò°',
  'triumph': 'üò§',
  'sunglasses': 'üòé',
  'smirk': 'üòè',
  'neutral_face': 'üòê',
  'expressionless': 'üòë',
  'unamused': 'üòí',
  'roll_eyes': 'üôÑ',
  'flushed': 'üò≥',
  'innocent': 'üòá',
  'heart_eyes': 'üòç',

  // „Ç∏„Çß„Çπ„ÉÅ„É£„Éº„Å®‰∫∫
  '+1': 'üëç',
  '-1': 'üëé',
  'wave': 'üëã',
  'raised_hands': 'üôå',
  'pray': 'üôè',
  'clap': 'üëè',
  'muscle': 'üí™',
  'point_up': '‚òùÔ∏è',
  'ok_hand': 'üëå',
  'v': '‚úåÔ∏è',
  'crossed_fingers': 'ü§û',
  'metal': 'ü§ò',
  'call_me_hand': 'ü§ô',
  'writing_hand': '‚úçÔ∏è',
  'raising_hand': 'üôã',

  // „Ç∑„É≥„Éú„É´
  'heart': '‚ù§Ô∏è',
  'broken_heart': 'üíî',
  'star': '‚≠ê',
  'sparkles': '‚ú®',
  'zap': '‚ö°',
  'fire': 'üî•',
  'boom': 'üí•',
  'question': '‚ùì',
  'exclamation': '‚ùó',
  'warning': '‚ö†Ô∏è',
  'white_check_mark': '‚úÖ',
  'x': '‚ùå',
  'no_entry': '‚õî',
  '100': 'üíØ',

  // Áâ©„Å®Ëá™ÁÑ∂
  'eyes': 'üëÄ',
  'ear': 'üëÇ',
  'nose': 'üëÉ',
  'brain': 'üß†',
  'robot': 'ü§ñ',
  'rocket': 'üöÄ',
  'hourglass': '‚åõ',
  'watch': '‚åö',
  'sunny': '‚òÄÔ∏è',
  'cloud': '‚òÅÔ∏è',
  'umbrella': '‚òî',
  'rainbow': 'üåà',
  'earth_asia': 'üåè',
  'moon': 'üåô',
  'crystal_ball': 'üîÆ',

  // ÊÑüÊÉÖ„Å®Ê¥ªÂãï
  'tada': 'üéâ',
  'gift': 'üéÅ',
  'trophy': 'üèÜ',
  'medal': 'üèÖ',
  'art': 'üé®',
  'musical_note': 'üéµ',
  'headphones': 'üéß',
  'video_game': 'üéÆ',
  'dart': 'üéØ',
  'book': 'üìö',
  'bulb': 'üí°',
  'moneybag': 'üí∞',
  'chart': 'üìä',
  'mailbox': 'üì´',
  'phone': 'üì±',

  // „Åù„ÅÆ‰ªñ
  'thumbsup': 'üëç',
  'thumbsdown': 'üëé',
  'zzz': 'üí§',
  'sweat_drops': 'üí¶',
  'dash': 'üí®',
};

export const formatMessageText = (message: SlackMessage): React.ReactNode[] => {
  const parts: React.ReactNode[] = [];
  let lastIndex = 0;

  // URL„ÅÆÂá¶ÁêÜ
  const processedText = message.text.replace(URL_PATTERN, (_, url) => url);

  // ÁîªÂÉèURL„ÅÆÂá¶ÁêÜ
  let match;
  while ((match = IMAGE_PATTERN.exec(processedText)) !== null) {
    if (match.index > lastIndex) {
      parts.push(...processText(processedText.slice(lastIndex, match.index)));
    }

    const imageUrl = match[1];
    parts.push(
      <img
        key={`img-${match.index}`}
        src={imageUrl}
        alt="„É°„ÉÉ„Çª„Éº„Ç∏ÂÜÖ„ÅÆÁîªÂÉè"
        style={{ maxWidth: '300px', maxHeight: '300px', borderRadius: '4px', margin: '4px 0' }}
      />
    );

    lastIndex = IMAGE_PATTERN.lastIndex;
  }

  // „ÉÜ„Ç≠„Çπ„Éà„ÅÆÊÆã„Çä„ÇíÂá¶ÁêÜ
  if (lastIndex < processedText.length) {
    parts.push(...processText(processedText.slice(lastIndex)));
  }

  // Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„ÅÆÁîªÂÉè„ÇíÂá¶ÁêÜ
  if (message.files) {
    message.files.forEach((file, index) => {
      if (file.url_private && file.mimetype?.startsWith('image/')) {
        parts.push(
          <img
            key={`file-${index}`}
            src={file.url_private}
            alt="Ê∑ª‰ªòÁîªÂÉè"
            style={{ maxWidth: '300px', maxHeight: '300px', borderRadius: '4px', margin: '4px 0' }}
          />
        );
      }
    });
  }

  return parts;
};

const processText = (text: string): React.ReactNode[] => {
  const parts: React.ReactNode[] = [];
  let lastIndex = 0;

  // „É¶„Éº„Ç∂„Éº„É°„É≥„Ç∑„Éß„É≥„ÅÆÂá¶ÁêÜ
  text = text.replace(USER_MENTION_PATTERN, '@user');

  // SlackÁµµÊñáÂ≠ó„ÅÆÂá¶ÁêÜ
  let match;
  while ((match = SLACK_EMOJI_PATTERN.exec(text)) !== null) {
    if (match.index > lastIndex) {
      parts.push(
        <span key={`text-${lastIndex}`}>
          {text.slice(lastIndex, match.index)}
        </span>
      );
    }

    const emojiName = match[1];
    parts.push(
      <span
        key={`emoji-${match.index}`}
        role="img"
        aria-label={emojiName}
        style={{ 
          fontSize: '1.2em',
          display: 'inline-flex',
          alignItems: 'center',
          verticalAlign: 'middle',
          margin: '0 1px'
        }}
      >
        {EMOJI_MAP[emojiName] || `:${emojiName}:`}
      </span>
    );

    lastIndex = SLACK_EMOJI_PATTERN.lastIndex;
  }

  if (lastIndex < text.length) {
    parts.push(
      <span key={`text-${lastIndex}`}>{text.slice(lastIndex)}</span>
    );
  }

  return parts;
};

export const formatReaction = (name: string): React.ReactNode => {
  return (
    <span 
      role="img" 
      aria-label={name}
      style={{ 
        fontSize: '1.2em',
        display: 'inline-flex',
        alignItems: 'center',
        verticalAlign: 'middle'
      }}
    >
      {EMOJI_MAP[name] || `:${name}:`}
    </span>
  );
};